<?php
/**
 * This file is part of DomainSpecificQuery
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 *
 * @author NicolÃ² Martini <nicmartnic@gmail.com>
 */

namespace DSQ\Expression;


use mixed;

class BoundedChildrenTreeExpression extends TreeExpression
{
    private $minChildren = 0;
    private $maxChildren = INF;

    /**
     * @param string $value
     * @param null $type
     * @param array $children
     * @param int $min
     * @param $max
     */
    public function __construct($value, array $children, $min = 0, $max = INF, $type = null)
    {
        parent::__construct($value, $type);

        $this->maxChildren = $max;

        $this->checkBounds(count($children), $min, INF);
        $this->setChildren($children);

        $this->minChildren = $min;
    }

    /**
     * {@inheritdoc}
     */
    public function addChild($child)
    {
        $this->checkBounds(count($this) + 1);
        return parent::addChild($child);
    }

    /**
     * {@inheritdoc}
     */
    public function removeChild($child)
    {
        $this->checkBounds(count($this) -1);
        return parent::removeChild($child); // TODO: Change the autogenerated stub
    }

    /**
     * {@inheritdoc}
     */
    public function removeAllChildren()
    {
        $this->checkBounds(0);
        return parent::removeAllChildren();
    }

    /**
     * {@inheritdoc}
     */
    public function setChild($child, $index = 0)
    {
        try { $this->getChild($index); }
        catch (\OutOfRangeException $e) { $this->checkBounds(count($this) + 1); }

        return parent::setChild($child, $index);
    }

    /**
     * {@inheritdoc}
     */
    public function setChildren(array $children)
    {
        $this->checkBounds(count($children));
        return parent::setChildren($children);
    }

    public function __clone()
    {
        $oldMin = $this->minChildren;
        $this->minChildren = 0;
        parent::__clone();
        $this->minChildren = $oldMin;
    }

    /**
     * @param int $n
     * @param null|int $min
     * @param null|int $max
     * @return $this
     * @throws \OverflowException
     * @throws \UnderflowException
     */
    private function checkBounds($n, $min = null, $max = null)
    {
        if (!isset($min)) $min = $this->minChildren;
        if (!isset($max)) $max = $this->maxChildren;

        if ($n < $min)
            throw new \UnderflowException("Class must have at least {$min} children");

        if ($n > $max)
            throw new \OverflowException("Class must have at most {$max} children");

        return $this;
    }
}