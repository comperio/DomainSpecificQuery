<?php
/**
 * This file is part of DomainSpecificQuery
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 *
 * @author NicolÃ² Martini <nicmartnic@gmail.com>
 */

namespace DSQ\Expression;


class BoundedChildrenTreeExpression extends TreeExpression
{
    private $minChildren;
    private $maxChildren;

    public function __construct($value, $type = null, $min = 0, $max = INF)
    {
        parent::__construct($value, $type);
        $this->minChildren = $min;
        $this->maxChildren = $max;
    }

    /**
     * {@inheritdoc}
     */
    public function addChild($child)
    {
        $this->checkBounds(count($this) + 1);
        return parent::addChild($child);
    }

    /**
     * {@inheritdoc}
     */
    public function removeChild($child)
    {
        $this->checkBounds(count($this) -1);
        return parent::removeChild($child); // TODO: Change the autogenerated stub
    }

    /**
     * {@inheritdoc}
     */
    public function removeAllChildren()
    {
        $this->checkBounds(0);
        return parent::removeAllChildren();
    }

    /**
     * {@inheritdoc}
     */
    public function setChild($child, $index = 0)
    {
        try { $this->getChild($index); }
        catch (\OutOfRangeException $e) { $this->checkBounds(count($this) + 1); }

        return parent::setChild($child, $index = 0);
    }


    /**
     * @param int $n
     * @return $this
     * @throws \OverflowException
     * @throws \UnderflowException
     */
    private function checkBounds($n)
    {
        if ($n < $this->minChildren)
            throw new \UnderflowException("Class must have at least {$this->minChildren}");

        if ($n > $this->maxChildren)
            throw new \OverflowException("Class must have at most {$this->minChildren}");

        return $this;
    }
}